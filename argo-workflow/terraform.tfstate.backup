{
  "version": 4,
  "terraform_version": "1.6.2",
  "serial": 32,
  "lineage": "f73b896d-0e67-9770-c662-78ae5cc1d07e",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argo-workflows-helm",
      "provider": "provider[\"registry.opentofu.org/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-workflows",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argo-workflows",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "3.5.5",
                "chart": "argo-workflows",
                "name": "argo-workflows",
                "namespace": "argo",
                "revision": 1,
                "values": "{\"clusterDomain\":\"cluster.local\",\"commonAnnotations\":{},\"commonLabels\":{},\"controller\":{\"affinity\":{},\"args\":[],\"automountServiceAccountToken\":true,\"clusterWorkflowTemplates\":{\"enabled\":true},\"command\":[],\"config\":\"{{- if .Values.controller.instanceID.enabled }}\\n{{- if .Values.controller.instanceID.useReleaseName }}\\ninstanceID: {{ .Release.Name }}\\n{{- else }}\\ninstanceID: {{ .Values.controller.instanceID.explicitID }}\\n{{- end }}\\n{{- end }}\\n## How many workflows can be running at the same time\\n##\\nparallelism:\\n## Maximun number of workflows running in a namespace\\n##\\nnamespaceParallelism:\\n{{- if or .Values.executor.resources .Values.executor.extraEnvVars .Values.executor.containerSecurityContext }}\\nexecutor:\\n  {{- if .Values.executor.resources }}\\n  resources: {{- include \\\"common.tplvalues.render\\\" (dict \\\"value\\\" .Values.executor.resources \\\"context\\\" $) | nindent 4 }}\\n  {{- else if ne .Values.executor.resourcesPreset \\\"none\\\" }}\\n  resources: {{- include \\\"common.resources.preset\\\" (dict \\\"type\\\" .Values.executor.resourcesPreset) | nindent 4 }}\\n  {{- end }}\\n  {{- if .Values.executor.extraEnvVars }}\\n  env: {{- include \\\"common.tplvalues.render\\\" (dict \\\"value\\\" .Values.executor.extraEnvVars \\\"context\\\" $) | nindent 4 }}\\n  {{- end }}\\n  {{- if .Values.executor.containerSecurityContext }}\\n  securityContext: {{- omit .Values.executor.containerSecurityContext \\\"enabled\\\" | toYaml | nindent 4 }}\\n  {{- end }}\\n{{- end }}\\n## Uncomment to enable Artofact repository with the provided configuration\\n## artifactRepository:\\n##  archiveLogs: false\\n##  configuration: {}\\n##\\n{{- if .Values.controller.metrics.enabled }}\\nmetricsConfig: {{- include \\\"common.tplvalues.render\\\" (dict \\\"value\\\" .Values.controller.metrics \\\"context\\\" $) | nindent 2 }}\\n{{- end }}\\n{{- if .Values.controller.telemetry.enabled }}\\ntelemetryConfig: {{- include \\\"common.tplvalues.render\\\" (dict \\\"value\\\" .Values.controller.telemetry \\\"context\\\" $) | nindent 2 }}\\n{{- end }}\\n{{- if (include \\\"argo-workflows.controller.persistence.enabled\\\" .) }}\\npersistence:\\n  connectionPool:\\n    maxIdleConns: 100\\n    maxOpenConns: 0\\n  nodeStatusOffLoad: false\\n  archive: {{ include \\\"common.tplvalues.render\\\" (dict \\\"value\\\" .Values.controller.persistence.archive.enabled \\\"context\\\" $) }}\\n  {{- if or .Values.postgresql.enabled (and .Values.externalDatabase.enabled (eq .Values.externalDatabase.type \\\"postgresql\\\")) }}\\n  postgresql:\\n  {{- else if or .Values.mysql.enabled (and .Values.externalDatabase.enabled (eq .Values.externalDatabase.type \\\"mysql\\\")) }}\\n  mysql:\\n  {{- end }}\\n    host: {{ include \\\"argo-workflows.controller.database.host\\\" . }}\\n    port: {{ include \\\"argo-workflows.controller.database.port\\\" . }}\\n    database: {{ include \\\"argo-workflows.controller.database\\\" . }}\\n    tableName: argo_workflows\\n    ## the database secrets must be in the same namespace of the controller\\n    ##\\n    userNameSecret:\\n      name: {{ include \\\"argo-workflows.controller.database.username.secret\\\" . }}\\n      key: username\\n    passwordSecret:\\n      name: {{ include \\\"argo-workflows.controller.database.password.secret\\\" . }}\\n      key: {{ include \\\"argo-workflows.controller.database.password.secret.key\\\" . }}\\n{{- end }}\\n{{- if .Values.controller.workflowDefaults }}\\nworkflowDefaults: {{- include \\\"common.tplvalues.render\\\" (dict \\\"value\\\" .Values.controller.workflowDefaults \\\"context\\\" $) | nindent 2 }}\\n{{- end }}\\n{{- if and .Values.server.auth.enabled .Values.server.auth.sso.enabled }}\\nsso: {{- include \\\"common.tplvalues.render\\\" (dict \\\"value\\\" .Values.server.auth.sso.config \\\"context\\\" $) | nindent 2 }}\\n{{- end }}\\n## Uncomment to set workflowRestrictions\\n## Ref: https://argoproj.github.io/argo-workflows/workflow-restrictions/\\n## workflowRestrictions: {}\\n## Uncomment to set links\\n## Ref: https://argoproj.github.io/argo-workflows/links/\\n## links: {}\\n##\\n\",\"containerPorts\":{\"metrics\":9090,\"telemetry\":8081},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"enabled\":true,\"privileged\":false,\"readOnlyRootFilesystem\":true,\"runAsGroup\":1001,\"runAsNonRoot\":true,\"runAsUser\":1001,\"seLinuxOptions\":{},\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"customLivenessProbe\":{},\"customReadinessProbe\":{},\"customStartupProbe\":{},\"existingConfigMap\":\"\",\"extraArgs\":\"\",\"extraEnvVars\":[],\"extraEnvVarsCM\":\"\",\"extraEnvVarsSecret\":\"\",\"extraVolumeMounts\":[],\"extraVolumes\":[],\"hostAliases\":[],\"image\":{\"digest\":\"\",\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"registry\":\"docker.io\",\"repository\":\"bitnami/argo-workflow-controller\",\"tag\":\"3.5.5-debian-12-r3\"},\"initContainers\":[],\"instanceID\":{\"enabled\":false,\"explicitID\":\"\",\"useReleaseName\":false},\"lifecycleHooks\":{},\"livenessProbe\":{\"enabled\":true,\"failureThreshold\":3,\"initialDelaySeconds\":90,\"periodSeconds\":60,\"successThreshold\":1,\"timeoutSeconds\":30},\"logging\":{\"globalLevel\":\"0\",\"level\":\"info\"},\"metrics\":{\"enabled\":false,\"path\":\"/metrics\",\"serviceMonitor\":{\"enabled\":false}},\"networkPolicy\":{\"allowExternal\":true,\"allowExternalEgress\":true,\"enabled\":true,\"extraEgress\":[],\"extraIngress\":[],\"ingressNSMatchLabels\":{},\"ingressNSPodMatchLabels\":{},\"kubeAPIServerPorts\":[443,6443,8443]},\"nodeAffinityPreset\":{\"key\":\"\",\"type\":\"\",\"values\":[]},\"nodeSelector\":{},\"pdb\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"persistence\":{\"archive\":{\"enabled\":false}},\"podAffinityPreset\":\"\",\"podAnnotations\":{},\"podAntiAffinityPreset\":\"soft\",\"podLabels\":{},\"podSecurityContext\":{\"enabled\":true,\"fsGroup\":1001,\"fsGroupChangePolicy\":\"Always\",\"supplementalGroups\":[],\"sysctls\":[]},\"priorityClassName\":\"\",\"rbac\":{\"create\":true},\"readinessProbe\":{\"enabled\":true,\"failureThreshold\":3,\"initialDelaySeconds\":30,\"periodSeconds\":60,\"successThreshold\":1,\"timeoutSeconds\":30},\"replicaCount\":1,\"resources\":{},\"resourcesPreset\":\"nano\",\"schedulerName\":\"\",\"service\":{\"annotations\":{},\"clusterIP\":\"\",\"externalTrafficPolicy\":\"Cluster\",\"extraPorts\":[],\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"nodePorts\":{\"metrics\":\"\",\"telemetry\":\"\"},\"ports\":{\"metrics\":8080,\"telemetry\":8081},\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":false,\"create\":true,\"name\":\"\"},\"sidecars\":[],\"startupProbe\":{\"enabled\":false,\"failureThreshold\":6,\"initialDelaySeconds\":300,\"path\":\"/\",\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":5},\"telemetry\":{\"enabled\":false,\"path\":\"/telemetry\"},\"tolerations\":[],\"topologySpreadConstraints\":[],\"updateStrategy\":{\"type\":\"RollingUpdate\"},\"workflowDefaults\":{},\"workflowNamespaces\":[\"default\"],\"workflowWorkers\":32},\"createAggregateRoles\":true,\"executor\":{\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"enabled\":true,\"privileged\":false,\"readOnlyRootFilesystem\":true,\"runAsGroup\":1001,\"runAsNonRoot\":true,\"runAsUser\":1001,\"seLinuxOptions\":{},\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"extraEnvVars\":[],\"image\":{\"digest\":\"\",\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"registry\":\"docker.io\",\"repository\":\"bitnami/argo-workflow-exec\",\"tag\":\"3.5.5-debian-12-r4\"},\"resources\":{},\"resourcesPreset\":\"nano\"},\"externalDatabase\":{\"database\":\"bitnami_workflows\",\"enabled\":false,\"existingSecret\":\"\",\"host\":\"localhost\",\"password\":\"\",\"port\":3306,\"type\":\"\",\"username\":\"bn_workflows\"},\"extraDeploy\":[],\"fullnameOverride\":\"\",\"global\":{\"compatibility\":{\"openshift\":{\"adaptSecurityContext\":\"auto\"}},\"imagePullSecrets\":[],\"imageRegistry\":\"\",\"storageClass\":\"\"},\"ingress\":{\"annotations\":{},\"apiVersion\":\"\",\"enabled\":false,\"extraHosts\":[],\"extraPaths\":[],\"extraRules\":[],\"extraTls\":[],\"hostname\":\"server.local\",\"ingressClassName\":\"\",\"path\":\"/\",\"pathType\":\"ImplementationSpecific\",\"secrets\":[],\"selfSigned\":false,\"tls\":false},\"kubeVersion\":\"\",\"mysql\":{\"auth\":{\"database\":\"bn_argo_workflows\",\"password\":\"\",\"username\":\"mysql\"},\"enabled\":false,\"primary\":{\"resources\":{},\"resourcesPreset\":\"small\"},\"service\":{\"ports\":{\"mysql\":3306}}},\"nameOverride\":\"\",\"postgresql\":{\"auth\":{\"database\":\"bn_argo_workflows\",\"password\":\"\",\"username\":\"postgres\"},\"enabled\":false,\"primary\":{\"resources\":{},\"resourcesPreset\":\"nano\"},\"service\":{\"ports\":{\"postgresql\":5432}}},\"rbac\":{\"singleNamespace\":false},\"server\":{\"affinity\":{},\"args\":[],\"auth\":{\"enabled\":true,\"mode\":\"client\",\"sso\":{\"config\":{\"clientId\":{\"key\":\"\",\"name\":\"\"},\"clientSecret\":{\"key\":\"\",\"name\":\"\"},\"issuer\":\"\",\"redirectUrl\":\"\"},\"enabled\":false,\"rbac\":{\"enabled\":true,\"secretWhitelist\":[]},\"scopes\":[]}},\"automountServiceAccountToken\":true,\"baseHref\":\"/\",\"clusterWorkflowTemplates\":{\"enableEditing\":true,\"enabled\":true},\"command\":[],\"containerPorts\":{\"web\":2746},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"enabled\":true,\"privileged\":false,\"readOnlyRootFilesystem\":true,\"runAsGroup\":1001,\"runAsNonRoot\":true,\"runAsUser\":1001,\"seLinuxOptions\":{},\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"customLivenessProbe\":{},\"customReadinessProbe\":{},\"customStartupProbe\":{},\"enabled\":true,\"extraArgs\":\"\",\"extraEnvVars\":[],\"extraEnvVarsCM\":\"\",\"extraEnvVarsSecret\":\"\",\"extraVolumeMounts\":[],\"extraVolumes\":[],\"hostAliases\":[],\"image\":{\"digest\":\"\",\"pullPolicy\":\"IfNotPresent\",\"pullSecrets\":[],\"registry\":\"docker.io\",\"repository\":\"bitnami/argo-workflow-cli\",\"tag\":\"3.5.5-debian-12-r5\"},\"initContainers\":[],\"lifecycleHooks\":{},\"livenessProbe\":{\"enabled\":true,\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":20,\"successThreshold\":1,\"timeoutSeconds\":1},\"networkPolicy\":{\"allowExternal\":true,\"allowExternalEgress\":true,\"enabled\":true,\"extraEgress\":[],\"extraIngress\":[],\"ingressNSMatchLabels\":{},\"ingressNSPodMatchLabels\":{},\"kubeAPIServerPorts\":[443,6443,8443]},\"nodeAffinityPreset\":{\"key\":\"\",\"type\":\"\",\"values\":[]},\"nodeSelector\":{},\"pdb\":{\"enabled\":false,\"maxUnavailable\":1,\"minAvailable\":1},\"podAffinityPreset\":\"\",\"podAnnotations\":{},\"podAntiAffinityPreset\":\"soft\",\"podLabels\":{},\"podSecurityContext\":{\"enabled\":true,\"fsGroup\":1001,\"fsGroupChangePolicy\":\"Always\",\"supplementalGroups\":[],\"sysctls\":[]},\"priorityClassName\":\"\",\"rbac\":{\"create\":true},\"readinessProbe\":{\"enabled\":true,\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":20,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicaCount\":1,\"resources\":{},\"resourcesPreset\":\"nano\",\"schedulerName\":\"\",\"secure\":false,\"service\":{\"annotations\":{},\"clusterIP\":\"\",\"externalTrafficPolicy\":\"Cluster\",\"extraPorts\":[],\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"nodePorts\":{\"http\":\"\"},\"ports\":{\"http\":80},\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":false,\"create\":true,\"name\":\"\"},\"sidecars\":[],\"startupProbe\":{\"enabled\":false,\"failureThreshold\":6,\"initialDelaySeconds\":300,\"path\":\"/\",\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":5},\"tolerations\":[],\"topologySpreadConstraints\":[],\"updateStrategy\":{\"type\":\"RollingUpdate\"}},\"workflows\":{\"rbac\":{\"create\":true},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":false,\"create\":true,\"name\":\"\"}}}",
                "version": "8.0.5"
              }
            ],
            "name": "argo-workflows",
            "namespace": "argo",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.bitnami.com/bitnami",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "# Copyright VMware, Inc.\n# SPDX-License-Identifier: APACHE-2.0\n\n## @section Global parameters\n## Global Docker image parameters\n## Please, note that this will override the image parameters, including dependencies, configured to use the global value\n## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass\n## @param global.imageRegistry Global Docker image registry\n## @param global.imagePullSecrets Global Docker registry secret names as an array\n## @param global.storageClass Global StorageClass for Persistent Volume(s)\n##\nglobal:\n  imageRegistry: \"\"\n  ## E.g.\n  ## imagePullSecrets:\n  ##   - myRegistryKeySecretName\n  ##\n  imagePullSecrets: []\n  storageClass: \"\"\n  ## Compatibility adaptations for Kubernetes platforms\n  ##\n  compatibility:\n    ## Compatibility adaptations for Openshift\n    ##\n    openshift:\n      ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)\n      ##\n      adaptSecurityContext: auto\n## @section Common parameters\n##\n\n## @param kubeVersion Override Kubernetes version\n##\nkubeVersion: \"\"\n## @param nameOverride String to partially override common.names.fullname\n##\nnameOverride: \"\"\n## @param fullnameOverride String to fully override common.names.fullname\n##\nfullnameOverride: \"\"\n## @param commonLabels Labels to add to all deployed objects\n##\ncommonLabels: {}\n## @param commonAnnotations Annotations to add to all deployed objects\n##\ncommonAnnotations: {}\n## @param clusterDomain Kubernetes cluster domain name\n##\nclusterDomain: cluster.local\n## @param extraDeploy Array of extra objects to deploy with the release\n##\nextraDeploy: []\n## @param rbac.singleNamespace Restrict Argo to only deploy into a single namespace by apply Roles and RoleBindings instead of the Cluster equivalents, and start argo-cli with the --namespaced flag. Use it in clusters with strict access policy.\n##\nrbac:\n  singleNamespace: false\n## @param createAggregateRoles Create Aggregated cluster roles\n##\ncreateAggregateRoles: true\n## @section Argo Workflows Server configuration parameters\n##\n\n## Argo Workflows server (based on the CLI) image\n##\nserver:\n  ## Bitnami Argo Workflow CLI image\n  ## ref: https://hub.docker.com/r/bitnami/argo-workflow-cli/tags/\n  ## @param server.image.registry [default: REGISTRY_NAME] server image registry\n  ## @param server.image.repository [default: REPOSITORY_NAME/argo-workflow-cli] server image repository\n  ## @skip server.image.tag server image tag (immutable tags are recommended)\n  ## @param server.image.digest server image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag\n  ## @param server.image.pullPolicy server image pull policy\n  ## @param server.image.pullSecrets server image pull secrets\n  ##\n  image:\n    registry: docker.io\n    repository: bitnami/argo-workflow-cli\n    tag: 3.5.5-debian-12-r5\n    digest: \"\"\n    ## Specify a imagePullPolicy\n    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'\n    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images\n    ##\n    pullPolicy: IfNotPresent\n    ## Optionally specify an array of imagePullSecrets.\n    ## Secrets must be manually created in the namespace.\n    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n    ## e.g:\n    ## pullSecrets:\n    ##   - myRegistryKeySecretName\n    ##\n    pullSecrets: []\n  ## @param server.enabled Enable server deployment\n  ##\n  enabled: true\n  ## @param server.replicaCount Number of server replicas to deploy\n  ##\n  replicaCount: 1\n  ## Configure extra options for server containers' liveness and readiness probes\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes\n  ## @param server.livenessProbe.enabled Enable livenessProbe on server nodes\n  ## @param server.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe\n  ## @param server.livenessProbe.periodSeconds Period seconds for livenessProbe\n  ## @param server.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe\n  ## @param server.livenessProbe.failureThreshold Failure threshold for livenessProbe\n  ## @param server.livenessProbe.successThreshold Success threshold for livenessProbe\n  ##\n  livenessProbe:\n    enabled: true\n    initialDelaySeconds: 10\n    periodSeconds: 20\n    timeoutSeconds: 1\n    failureThreshold: 3\n    successThreshold: 1\n  ## @param server.readinessProbe.enabled Enable readinessProbe on server nodes\n  ## @param server.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe\n  ## @param server.readinessProbe.periodSeconds Period seconds for readinessProbe\n  ## @param server.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe\n  ## @param server.readinessProbe.failureThreshold Failure threshold for readinessProbe\n  ## @param server.readinessProbe.successThreshold Success threshold for readinessProbe\n  ##\n  readinessProbe:\n    enabled: true\n    initialDelaySeconds: 10\n    periodSeconds: 20\n    timeoutSeconds: 1\n    failureThreshold: 3\n    successThreshold: 1\n  ## @param server.startupProbe.enabled Enable startupProbe\n  ## @param server.startupProbe.path Path to check for startupProbe\n  ## @param server.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe\n  ## @param server.startupProbe.periodSeconds Period seconds for startupProbe\n  ## @param server.startupProbe.timeoutSeconds Timeout seconds for startupProbe\n  ## @param server.startupProbe.failureThreshold Failure threshold for startupProbe\n  ## @param server.startupProbe.successThreshold Success threshold for startupProbe\n  ##\n  startupProbe:\n    enabled: false\n    path: /\n    initialDelaySeconds: 300\n    periodSeconds: 10\n    timeoutSeconds: 5\n    failureThreshold: 6\n    successThreshold: 1\n  ## @param server.customLivenessProbe Server custom livenessProbe that overrides the default one\n  ##\n  customLivenessProbe: {}\n  ## @param server.customReadinessProbe Server custom readinessProbe that overrides the default one\n  ##\n  customReadinessProbe: {}\n  ## @param server.customStartupProbe Server custom startupProbe that overrides the default one\n  ##\n  customStartupProbe: {}\n  ## server resource requests and limits\n  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n  ## @param server.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if server.resources is set (server.resources is recommended for production).\n  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15\n  ##\n  resourcesPreset: \"nano\"\n  ## @param server.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)\n  ## Example:\n  ## resources:\n  ##   requests:\n  ##     cpu: 2\n  ##     memory: 512Mi\n  ##   limits:\n  ##     cpu: 3\n  ##     memory: 1024Mi\n  ##\n  resources: {}\n  ## Configure Pods Security Context\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod\n  ## @param server.podSecurityContext.enabled Enabled server pods' Security Context\n  ## @param server.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy\n  ## @param server.podSecurityContext.sysctls Set kernel settings using the sysctl interface\n  ## @param server.podSecurityContext.supplementalGroups Set filesystem extra groups\n  ## @param server.podSecurityContext.fsGroup Set server pod's Security Context fsGroup\n  ##\n  podSecurityContext:\n    enabled: true\n    fsGroupChangePolicy: Always\n    sysctls: []\n    supplementalGroups: []\n    fsGroup: 1001\n  ## Configure Container Security Context\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod\n  ## @param server.containerSecurityContext.enabled Enabled server containers' Security Context\n  ## @param server.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container\n  ## @param server.containerSecurityContext.runAsUser Set server containers' Security Context runAsUser\n  ## @param server.containerSecurityContext.runAsGroup Set server containers' Security Context runAsGroup\n  ## @param server.containerSecurityContext.runAsNonRoot Set server containers' Security Context runAsNonRoot\n  ## @param server.containerSecurityContext.readOnlyRootFilesystem Set read only root file system pod's Security Conte\n  ## @param server.containerSecurityContext.privileged Set server container's Security Context privileged\n  ## @param server.containerSecurityContext.allowPrivilegeEscalation Set server container's Security Context allowPrivilegeEscalation\n  ## @param server.containerSecurityContext.capabilities.drop List of capabilities to be dropped\n  ## @param server.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile\n  ##\n  containerSecurityContext:\n    enabled: true\n    seLinuxOptions: {}\n    runAsUser: 1001\n    runAsGroup: 1001\n    runAsNonRoot: true\n    privileged: false\n    allowPrivilegeEscalation: false\n    capabilities:\n      drop: [\"ALL\"]\n    seccompProfile:\n      type: \"RuntimeDefault\"\n    readOnlyRootFilesystem: true\n  ## Create RBAC resources for the Argo workflows server\n  ## @param server.rbac.create Create RBAC resources for the Argo workflows server\n  ##\n  rbac:\n    create: true\n  ## @param server.extraArgs Extra arguments for the server command line\n  ##\n  extraArgs: \"\"\n  ## Enable authentication with the specified mode\n  ## Ref: https://argoproj.github.io/argo-workflows/argo-server-auth-mode/\n  ##\n  auth:\n    ## @param server.auth.enabled Enable authentication\n    ##\n    enabled: true\n    ## @param server.auth.mode Set authentication mode. Either `server`, `client` or `sso`.\n    ##\n    mode: client\n    ## SSO configuration when SSO is specified as a server auth mode.\n    ## All the values are required. SSO is activated by adding --auth-mode=sso to the server command line.\n    ## @param server.auth.sso.enabled Enable SSO configuration for the server auth mode\n    ## @param server.auth.sso.config.issuer Root URL for the OIDC identity provider\n    ## @param server.auth.sso.config.clientId.name Name of the secret containing the OIDC client ID\n    ## @param server.auth.sso.config.clientId.key Key in the secret to obtain the OIDC client ID\n    ## @param server.auth.sso.config.clientSecret.name Name of the secret containing the OIDC client secret\n    ## @param server.auth.sso.config.clientSecret.key Key in the secret to obtain the OIDC client secret\n    ## @param server.auth.sso.config.redirectUrl The OIDC redirect URL. Should be in the form \u003cargo-root-url\u003e/oauth2/callback.\n    ## @param server.auth.sso.rbac.enabled Create RBAC resources for SSO\n    ## @param server.auth.sso.rbac.secretWhitelist Restricts the secrets that the server can read\n    ## @param server.auth.sso.scopes Scopes requested from the SSO ID provider\n    ##\n    sso:\n      enabled: false\n      ## The root URL of the OIDC identity provider.\n      ## E.g.\n      ## issuer: \"https://accounts.google.com\"\n      ##\n      config:\n        issuer: \"\"\n        ## Name of a secret and a key in it to retrieve the app OIDC client ID from.\n        ##\n        clientId:\n          name: \"\"\n          key: \"\"\n        ## Name of a secret and a key in it to retrieve the app OIDC client secret from.\n        ##\n        clientSecret:\n          name: \"\"\n          key: \"\"\n        ## The OIDC redirect URL. Should be in the form \u003cargo-root-url\u003e/oauth2/callback.\n        ##\n        redirectUrl: \"\"\n      ## Create RBAC resources for SSO\n      ##\n      rbac:\n        enabled: true\n        ## When present, restricts secrets the server can read to a given list.\n        ## You can use it to restrict the server to only be able to access the\n        ## service account token secrets that are associated with service accounts\n        ## used for authorization.\n        ##\n        secretWhitelist: []\n      ## Scopes requested from the SSO ID provider.  The 'groups' scope requests\n      ## group membership information, which is usually used for authorization\n      ## decisions.\n      ##\n      scopes: []\n  ## @param server.clusterWorkflowTemplates.enabled Create ClusterRole and CRB for the controoler to access ClusterWorkflowTemplates\n  ## @param server.clusterWorkflowTemplates.enableEditing Give the server permissions to edit ClusterWorkflowTemplates\n  ##\n  clusterWorkflowTemplates:\n    # Create a ClusterRole and CRB for the controller to access ClusterWorkflowTemplates.\n    enabled: true\n    enableEditing: true\n  ## Pod disruption budget configuration\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\n  ## @param server.pdb.enabled Create Pod Disruption Budget for the server component\n  ## @param server.pdb.minAvailable Sets the min number of pods availables for the Pod Disruption Budget\n  ## @param server.pdb.maxUnavailable Sets the max number of pods unavailable for the Pod Disruption Budget\n  ##\n  pdb:\n    enabled: false\n    minAvailable: 1\n    maxUnavailable: 1\n  ## Run the argo server in \"secure\" mode.\n  ## Ref: https://argoproj.github.io/argo-workflows/tls/\n  ## @param server.secure Run Argo server in secure mode\n  ##\n  secure: false\n  ## Base URL for client resources\n  ## Ref: https://github.com/argoproj/argo-workflows/issues/716#issuecomment-433213190\n  ## @param server.baseHref Base href of the Argo Workflows deployment\n  ##\n  baseHref: /\n  ## Server container port\n  ## @param server.containerPorts.web argo Server container port\n  ##\n  containerPorts:\n    web: 2746\n  ## Server Service Account\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n  ## @param server.serviceAccount.create Specifies whether a ServiceAccount should be created\n  ## @param server.serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n  ## @param server.serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n  ## @param server.serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n  ##\n  serviceAccount:\n    create: true\n    name: \"\"\n    automountServiceAccountToken: false\n    annotations: {}\n  ## @param server.command Override default container command (useful when using custom images)\n  ##\n  command: []\n  ## @param server.args Override default container args (useful when using custom images)\n  ##\n  args: []\n  ## @param server.automountServiceAccountToken Mount Service Account token in pod\n  ##\n  automountServiceAccountToken: true\n  ## @param server.hostAliases server pods host aliases\n  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/\n  ##\n  hostAliases: []\n  ## @param server.podLabels Extra labels for server pods\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  ##\n  podLabels: {}\n  ## @param server.podAnnotations Annotations for server pods\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n  ##\n  podAnnotations: {}\n  ## @param server.podAffinityPreset Pod affinity preset. Ignored if `server.affinity` is set. Allowed values: `soft` or `hard`\n  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n  ##\n  podAffinityPreset: \"\"\n  ## @param server.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `server.affinity` is set. Allowed values: `soft` or `hard`\n  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n  ##\n  podAntiAffinityPreset: soft\n  ## Node server.affinity preset\n  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n  ##\n  nodeAffinityPreset:\n    ## @param server.nodeAffinityPreset.type Node affinity preset type. Ignored if `server.affinity` is set. Allowed values: `soft` or `hard`\n    ##\n    type: \"\"\n    ## @param server.nodeAffinityPreset.key Node label key to match. Ignored if `server.affinity` is set\n    ##\n    key: \"\"\n    ## @param server.nodeAffinityPreset.values Node label values to match. Ignored if `server.affinity` is set\n    ## E.g.\n    ## values:\n    ##   - e2e-az1\n    ##   - e2e-az2\n    ##\n    values: []\n  ## @param server.affinity Affinity for server pods assignment\n  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ## NOTE: `server.podAffinityPreset`, `server.podAntiAffinityPreset`, and `server.nodeAffinityPreset` will be ignored when it's set\n  ##\n  affinity: {}\n  ## @param server.nodeSelector Node labels for server pods assignment\n  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/\n  ##\n  nodeSelector: {}\n  ## @param server.tolerations Tolerations for server pods assignment\n  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  ##\n  tolerations: []\n  ## @param server.updateStrategy.type server statefulset strategy type\n  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies\n  ##\n  updateStrategy:\n    ## StrategyType\n    ## Can be set to RollingUpdate or OnDelete\n    ##\n    type: RollingUpdate\n  ## @param server.topologySpreadConstraints Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  ## topologySpreadConstraints:\n  ##   - maxSkew: 1\n  ##     topologyKey: failure-domain.beta.kubernetes.io/zone\n  ##     whenUnsatisfiable: DoNotSchedule\n  ##\n  topologySpreadConstraints: []\n  ## @param server.schedulerName Alternate scheduler for the server deployment\n  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/\n  ##\n  schedulerName: \"\"\n  ## @param server.priorityClassName server pods' priorityClassName\n  ##\n  priorityClassName: \"\"\n  ## @param server.lifecycleHooks for the server container(s) to automate configuration before or after startup\n  ##\n  lifecycleHooks: {}\n  ## @param server.extraEnvVars Array with extra environment variables to add to server nodes\n  ## e.g:\n  ## extraEnvVars:\n  ##   - name: FOO\n  ##     value: \"bar\"\n  ##\n  extraEnvVars: []\n  ## @param server.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for server nodes\n  ##\n  extraEnvVarsCM: \"\"\n  ## @param server.extraEnvVarsSecret Name of existing Secret containing extra env vars for server nodes\n  ##\n  extraEnvVarsSecret: \"\"\n  ## @param server.extraVolumes Optionally specify extra list of additional volumes for the server pod(s)\n  ##\n  extraVolumes: []\n  ## @param server.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the server container(s)\n  ##\n  extraVolumeMounts: []\n  ## @param server.sidecars Add additional sidecar containers to the server pod(s)\n  ## e.g:\n  ## sidecars:\n  ##   - name: your-image-name\n  ##     image: your-image\n  ##     imagePullPolicy: Always\n  ##     ports:\n  ##       - name: portname\n  ##         containerPort: 1234\n  ##\n  sidecars: []\n  ## @param server.initContainers Add additional init containers to the server pod(s)\n  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n  ## e.g:\n  ## initContainers:\n  ##  - name: your-image-name\n  ##    image: your-image\n  ##    imagePullPolicy: Always\n  ##    command: ['sh', '-c', 'echo \"hello world\"']\n  ##\n  initContainers: []\n  ## Server service parameters\n  ##\n  service:\n    ## @param server.service.type server service type\n    ##\n    type: ClusterIP\n    ## @param server.service.ports.http server service HTTP port\n    ##\n    ports:\n      http: 80\n    ## Node ports to expose\n    ## @param server.service.nodePorts.http Node port for HTTP\n    ## NOTE: choose port between \u003c30000-32767\u003e\n    ##\n    nodePorts:\n      http: \"\"\n    ## @param server.service.clusterIP server service Cluster IP\n    ## e.g.:\n    ## clusterIP: None\n    ##\n    clusterIP: \"\"\n    ## @param server.service.loadBalancerIP server service Load Balancer IP\n    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer\n    ##\n    loadBalancerIP: \"\"\n    ## @param server.service.loadBalancerSourceRanges server service Load Balancer sources\n    ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service\n    ## e.g:\n    ## loadBalancerSourceRanges:\n    ##   - 10.10.10.0/24\n    ##\n    loadBalancerSourceRanges: []\n    ## @param server.service.externalTrafficPolicy server service external traffic policy\n    ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    ##\n    externalTrafficPolicy: Cluster\n    ## @param server.service.annotations Additional custom annotations for server service\n    ##\n    annotations: {}\n    ## @param server.service.extraPorts Extra port to expose on the server service\n    ##\n    extraPorts: []\n  ## Network Policies\n  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/\n  ##\n  networkPolicy:\n    ## @param server.networkPolicy.enabled Specifies whether a NetworkPolicy should be created\n    ##\n    enabled: true\n    ## @param server.networkPolicy.allowExternal Don't require server label for connections\n    ## The Policy model to apply. When set to false, only pods with the correct\n    ## server label will have network access to the ports server is listening\n    ## on. When true, server will accept connections from any source\n    ## (with the correct destination port).\n    ##\n    allowExternal: true\n    ## @param server.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.\n    ##\n    allowExternalEgress: true\n    ## @param server.networkPolicy.kubeAPIServerPorts [array] List of possible endpoints to kube-apiserver (limit to your cluster settings to increase security)\n    ##\n    kubeAPIServerPorts: [443, 6443, 8443]\n    ## @param server.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolice\n    ## e.g:\n    ## extraIngress:\n    ##   - ports:\n    ##       - port: 1234\n    ##     from:\n    ##       - podSelector:\n    ##           - matchLabels:\n    ##               - role: frontend\n    ##       - podSelector:\n    ##           - matchExpressions:\n    ##               - key: role\n    ##                 operator: In\n    ##                 values:\n    ##                   - frontend\n    extraIngress: []\n    ## @param server.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy (ignored if allowExternalEgress=true)\n    ## e.g:\n    ## extraEgress:\n    ##   - ports:\n    ##       - port: 1234\n    ##     to:\n    ##       - podSelector:\n    ##           - matchLabels:\n    ##               - role: frontend\n    ##       - podSelector:\n    ##           - matchExpressions:\n    ##               - key: role\n    ##                 operator: In\n    ##                 values:\n    ##                   - frontend\n    ##\n    extraEgress: []\n    ## @param server.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces\n    ## @param server.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces\n    ##\n    ingressNSMatchLabels: {}\n    ingressNSPodMatchLabels: {}\n## @section Argo Workflows Controller configuration parameters\n##\n\n## Argo Workflows Controller\n##\ncontroller:\n  ## Bitnami Argo Workflow Controller image\n  ## ref: https://hub.docker.com/r/bitnami/argo-workflow-controller/tags/\n  ## @param controller.image.registry [default: REGISTRY_NAME] controller image registry\n  ## @param controller.image.repository [default: REPOSITORY_NAME/argo-workflow-controller] controller image repository\n  ## @skip controller.image.tag controller image tag (immutable tags are recommended)\n  ## @param controller.image.digest controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag\n  ## @param controller.image.pullPolicy controller image pull policy\n  ## @param controller.image.pullSecrets controller image pull secrets\n  ##\n  image:\n    registry: docker.io\n    repository: bitnami/argo-workflow-controller\n    tag: 3.5.5-debian-12-r3\n    digest: \"\"\n    ## Specify a imagePullPolicy\n    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'\n    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images\n    ##\n    pullPolicy: IfNotPresent\n    ## Optionally specify an array of imagePullSecrets.\n    ## Secrets must be manually created in the namespace.\n    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n    ## e.g:\n    ## pullSecrets:\n    ##   - myRegistryKeySecretName\n    ##\n    pullSecrets: []\n  ## @param controller.replicaCount Number of controller replicas to deploy\n  ##\n  replicaCount: 1\n  ## Configure extra options for controller containers' liveness and readiness probes\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes\n  ## @param controller.livenessProbe.enabled Enable livenessProbe on controller nodes\n  ## @param controller.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe\n  ## @param controller.livenessProbe.periodSeconds Period seconds for livenessProbe\n  ## @param controller.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe\n  ## @param controller.livenessProbe.failureThreshold Failure threshold for livenessProbe\n  ## @param controller.livenessProbe.successThreshold Success threshold for livenessProbe\n  ##\n  livenessProbe:\n    enabled: true\n    initialDelaySeconds: 90\n    periodSeconds: 60\n    timeoutSeconds: 30\n    failureThreshold: 3\n    successThreshold: 1\n  ## @param controller.readinessProbe.enabled Enable readinessProbe on controller nodes\n  ## @param controller.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe\n  ## @param controller.readinessProbe.periodSeconds Period seconds for readinessProbe\n  ## @param controller.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe\n  ## @param controller.readinessProbe.failureThreshold Failure threshold for readinessProbe\n  ## @param controller.readinessProbe.successThreshold Success threshold for readinessProbe\n  ##\n  readinessProbe:\n    enabled: true\n    initialDelaySeconds: 30\n    periodSeconds: 60\n    timeoutSeconds: 30\n    failureThreshold: 3\n    successThreshold: 1\n  ## @param controller.startupProbe.enabled Enable startupProbe\n  ## @param controller.startupProbe.path Path to check for startupProbe\n  ## @param controller.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe\n  ## @param controller.startupProbe.periodSeconds Period seconds for startupProbe\n  ## @param controller.startupProbe.timeoutSeconds Timeout seconds for startupProbe\n  ## @param controller.startupProbe.failureThreshold Failure threshold for startupProbe\n  ## @param controller.startupProbe.successThreshold Success threshold for startupProbe\n  ##\n  startupProbe:\n    enabled: false\n    path: /\n    initialDelaySeconds: 300\n    periodSeconds: 10\n    timeoutSeconds: 5\n    failureThreshold: 6\n    successThreshold: 1\n  ## @param controller.customLivenessProbe Controller custom livenessProbe that overrides the default one\n  ##\n  customLivenessProbe: {}\n  ## @param controller.customReadinessProbe Controller custom readinessProbe that overrides the default one\n  ##\n  customReadinessProbe: {}\n  ## @param controller.customStartupProbe Controller custom startupProbe that overrides the default one\n  ##\n  customStartupProbe: {}\n  ## controller resource requests and limits\n  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n  ## @param controller.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if controller.resources is set (controller.resources is recommended for production).\n  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15\n  ##\n  resourcesPreset: \"nano\"\n  ## @param controller.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)\n  ## Example:\n  ## resources:\n  ##   requests:\n  ##     cpu: 2\n  ##     memory: 512Mi\n  ##   limits:\n  ##     cpu: 3\n  ##     memory: 1024Mi\n  ##\n  resources: {}\n  ## Configure Pods Security Context\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod\n  ## @param controller.podSecurityContext.enabled Enabled controller pods' Security Context\n  ## @param controller.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy\n  ## @param controller.podSecurityContext.sysctls Set kernel settings using the sysctl interface\n  ## @param controller.podSecurityContext.supplementalGroups Set filesystem extra groups\n  ## @param controller.podSecurityContext.fsGroup Set controller pod's Security Context fsGroup\n  ##\n  podSecurityContext:\n    enabled: true\n    fsGroupChangePolicy: Always\n    sysctls: []\n    supplementalGroups: []\n    fsGroup: 1001\n  ## Configure Container Security Context\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod\n  ## @param controller.containerSecurityContext.enabled Enabled controller containers' Security Context\n  ## @param controller.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container\n  ## @param controller.containerSecurityContext.runAsUser Set controller containers' Security Context runAsUser\n  ## @param controller.containerSecurityContext.runAsGroup Set controller containers' Security Context runAsGroup\n  ## @param controller.containerSecurityContext.runAsNonRoot Set controller containers' Security Context runAsNonRoot\n  ## @param controller.containerSecurityContext.readOnlyRootFilesystem Set read only root file system pod's Security Conte\n  ## @param controller.containerSecurityContext.privileged Set controller container's Security Context privileged\n  ## @param controller.containerSecurityContext.allowPrivilegeEscalation Set controller container's Security Context allowPrivilegeEscalation\n  ## @param controller.containerSecurityContext.capabilities.drop List of capabilities to be dropped\n  ## @param controller.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile\n  ##\n  containerSecurityContext:\n    enabled: true\n    seLinuxOptions: {}\n    runAsUser: 1001\n    runAsGroup: 1001\n    runAsNonRoot: true\n    privileged: false\n    allowPrivilegeEscalation: false\n    capabilities:\n      drop: [\"ALL\"]\n    seccompProfile:\n      type: \"RuntimeDefault\"\n    readOnlyRootFilesystem: true\n  ## Server container port\n  ## @param controller.containerPorts.metrics Port to expose controller metrics\n  ## @param controller.containerPorts.telemetry Port to expose controller telemetry\n  ##\n  containerPorts:\n    metrics: 9090\n    telemetry: 8081\n  ## Create RBAC resources for the Argo workflows controller\n  ## @param controller.rbac.create Create RBAC resources for the Argo workflows controller\n  ##\n  rbac:\n    create: true\n  ## Use an existing configmap instead of creating a configmap with the specified parameters\n  ## @param controller.existingConfigMap\n  ##\n  existingConfigMap: \"\"\n  ## @param controller.extraArgs Extra arguments for the controller command line\n  ##\n  extraArgs: \"\"\n  ##\n  ## @param controller.persistence.archive.enabled Save completed workflows to an SQL database.\n  persistence:\n    archive:\n      enabled: false\n  ## Controller configmap configuration content. Requires controller.existingConfigmap to be empty.\n  ## @param controller.config [object] Controller configmap configuration content\n  ##\n  config: |\n    {{- if .Values.controller.instanceID.enabled }}\n    {{- if .Values.controller.instanceID.useReleaseName }}\n    instanceID: {{ .Release.Name }}\n    {{- else }}\n    instanceID: {{ .Values.controller.instanceID.explicitID }}\n    {{- end }}\n    {{- end }}\n    ## How many workflows can be running at the same time\n    ##\n    parallelism:\n    ## Maximun number of workflows running in a namespace\n    ##\n    namespaceParallelism:\n    {{- if or .Values.executor.resources .Values.executor.extraEnvVars .Values.executor.containerSecurityContext }}\n    executor:\n      {{- if .Values.executor.resources }}\n      resources: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.executor.resources \"context\" $) | nindent 4 }}\n      {{- else if ne .Values.executor.resourcesPreset \"none\" }}\n      resources: {{- include \"common.resources.preset\" (dict \"type\" .Values.executor.resourcesPreset) | nindent 4 }}\n      {{- end }}\n      {{- if .Values.executor.extraEnvVars }}\n      env: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.executor.extraEnvVars \"context\" $) | nindent 4 }}\n      {{- end }}\n      {{- if .Values.executor.containerSecurityContext }}\n      securityContext: {{- omit .Values.executor.containerSecurityContext \"enabled\" | toYaml | nindent 4 }}\n      {{- end }}\n    {{- end }}\n    ## Uncomment to enable Artofact repository with the provided configuration\n    ## artifactRepository:\n    ##  archiveLogs: false\n    ##  configuration: {}\n    ##\n    {{- if .Values.controller.metrics.enabled }}\n    metricsConfig: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.controller.metrics \"context\" $) | nindent 2 }}\n    {{- end }}\n    {{- if .Values.controller.telemetry.enabled }}\n    telemetryConfig: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.controller.telemetry \"context\" $) | nindent 2 }}\n    {{- end }}\n    {{- if (include \"argo-workflows.controller.persistence.enabled\" .) }}\n    persistence:\n      connectionPool:\n        maxIdleConns: 100\n        maxOpenConns: 0\n      nodeStatusOffLoad: false\n      archive: {{ include \"common.tplvalues.render\" (dict \"value\" .Values.controller.persistence.archive.enabled \"context\" $) }}\n      {{- if or .Values.postgresql.enabled (and .Values.externalDatabase.enabled (eq .Values.externalDatabase.type \"postgresql\")) }}\n      postgresql:\n      {{- else if or .Values.mysql.enabled (and .Values.externalDatabase.enabled (eq .Values.externalDatabase.type \"mysql\")) }}\n      mysql:\n      {{- end }}\n        host: {{ include \"argo-workflows.controller.database.host\" . }}\n        port: {{ include \"argo-workflows.controller.database.port\" . }}\n        database: {{ include \"argo-workflows.controller.database\" . }}\n        tableName: argo_workflows\n        ## the database secrets must be in the same namespace of the controller\n        ##\n        userNameSecret:\n          name: {{ include \"argo-workflows.controller.database.username.secret\" . }}\n          key: username\n        passwordSecret:\n          name: {{ include \"argo-workflows.controller.database.password.secret\" . }}\n          key: {{ include \"argo-workflows.controller.database.password.secret.key\" . }}\n    {{- end }}\n    {{- if .Values.controller.workflowDefaults }}\n    workflowDefaults: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.controller.workflowDefaults \"context\" $) | nindent 2 }}\n    {{- end }}\n    {{- if and .Values.server.auth.enabled .Values.server.auth.sso.enabled }}\n    sso: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.server.auth.sso.config \"context\" $) | nindent 2 }}\n    {{- end }}\n    ## Uncomment to set workflowRestrictions\n    ## Ref: https://argoproj.github.io/argo-workflows/workflow-restrictions/\n    ## workflowRestrictions: {}\n    ## Uncomment to set links\n    ## Ref: https://argoproj.github.io/argo-workflows/links/\n    ## links: {}\n    ##\n  ## Configure the controller to accept only submissions with a matching instanceID attribute\n  ## @param controller.instanceID.enabled Enable submission filtering based on instanceID attribute. Requires to set instanceID.useReleaseName or instanceID.explicitID\n  ## @param controller.instanceID.useReleaseName Use the release name to filter submissions\n  ## @param controller.instanceID.explicitID Filter submissions based on an explicit instance ID\n  ##\n  instanceID:\n    enabled: false\n    ## NOTE: If `instanceID.enabled` is set to `true` then either `instanceID.userReleaseName` or `instanceID.explicitID` must be defined.\n    ##\n    useReleaseName: false\n    explicitID: \"\"\n    ## @param controller.clusterWorkflowTemplates.enabled Whether to create a ClusterRole and Cluster Role Binding to access ClusterWokflowTemplates resources\n  ##\n  clusterWorkflowTemplates:\n    enabled: true\n  ## Metrics configuration for the controller\n  ## @param controller.metrics.enabled Enable controller metrics exporter\n  ## @param controller.metrics.path Path to expose controller metrics\n  ## @param controller.metrics.serviceMonitor.enabled Enable prometheus service monitor configuration\n  ##\n  metrics:\n    enabled: false\n    path: /metrics\n    serviceMonitor:\n      enabled: false\n  ## Telemetry configuration for the controller\n  ## @param controller.telemetry.enabled Enable telemetry for the controller\n  ## @param controller.telemetry.path Path to expose telemetry information\n  ##\n  telemetry:\n    enabled: false\n    path: /telemetry\n  ## Number of workflow workers to deploy\n  ## @param controller.workflowWorkers Number of workflow workers to deploy\n  ##\n  workflowWorkers: 32\n  ## Namespaces allowed to run workflows\n  ## @param controller.workflowNamespaces Namespaces allowed to run workflows\n  ##\n  workflowNamespaces:\n    - default\n  ## Default Workflow Values\n  ## Ref: https://argoproj.github.io/argo-workflows/default-workflow-specs/#setting-default-workflow-values\n  ## @param controller.workflowDefaults Default Workflow Values\n  ##\n  workflowDefaults: {}\n  ## Logging level for the controller\n  ## @param controller.logging.level Level for the controller logging\n  ## @param controller.logging.globalLevel Global logging level for the controller\n  ##\n  logging:\n    level: info\n    globalLevel: \"0\"\n  ## Pod disruption budget configuration\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\n  ## @param controller.pdb.enabled Create Pod Disruption Budget for the controller component\n  ## @param controller.pdb.minAvailable Sets the min number of pods availables for the Pod Disruption Budget\n  ## @param controller.pdb.maxUnavailable Sets the max number of pods unavailable for the Pod Disruption Budget\n  ##\n  pdb:\n    enabled: false\n    minAvailable: 1\n    maxUnavailable: 1\n  ## Controller Service Account\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/\n  ## @param controller.serviceAccount.create Specifies whether a ServiceAccount should be created\n  ## @param controller.serviceAccount.name Name of the service account to use. If not set and create is true, a name is generated using the fullname template.\n  ## @param controller.serviceAccount.automountServiceAccountToken Automount service account token for the server service account\n  ## @param controller.serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n  ##\n  serviceAccount:\n    create: true\n    name: \"\"\n    automountServiceAccountToken: false\n    annotations: {}\n  ## @param controller.command Override default container command (useful when using custom images)\n  ##\n  command: []\n  ## @param controller.args Override default container args (useful when using custom images)\n  ##\n  args: []\n  ## @param controller.automountServiceAccountToken Mount Service Account token in pod\n  ##\n  automountServiceAccountToken: true\n  ## @param controller.hostAliases controller pods host aliases\n  ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/\n  ##\n  hostAliases: []\n  ## @param controller.podLabels Extra labels for controller pods\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/\n  ##\n  podLabels: {}\n  ## @param controller.podAnnotations Annotations for controller pods\n  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/\n  ##\n  podAnnotations: {}\n  ## @param controller.podAffinityPreset Pod affinity preset. Ignored if `controller.affinity` is set. Allowed values: `soft` or `hard`\n  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n  ##\n  podAffinityPreset: \"\"\n  ## @param controller.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `controller.affinity` is set. Allowed values: `soft` or `hard`\n  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n  ##\n  podAntiAffinityPreset: soft\n  ## Node controller.affinity preset\n  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity\n  ##\n  nodeAffinityPreset:\n    ## @param controller.nodeAffinityPreset.type Node affinity preset type. Ignored if `controller.affinity` is set. Allowed values: `soft` or `hard`\n    ##\n    type: \"\"\n    ## @param controller.nodeAffinityPreset.key Node label key to match. Ignored if `controller.affinity` is set\n    ##\n    key: \"\"\n    ## @param controller.nodeAffinityPreset.values Node label values to match. Ignored if `controller.affinity` is set\n    ## E.g.\n    ## values:\n    ##   - e2e-az1\n    ##   - e2e-az2\n    ##\n    values: []\n  ## @param controller.affinity Affinity for controller pods assignment\n  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ## NOTE: `controller.podAffinityPreset`, `controller.podAntiAffinityPreset`, and `controller.nodeAffinityPreset` will be ignored when it's set\n  ##\n  affinity: {}\n  ## @param controller.nodeSelector Node labels for controller pods assignment\n  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/\n  ##\n  nodeSelector: {}\n  ## @param controller.tolerations Tolerations for controller pods assignment\n  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/\n  ##\n  tolerations: []\n  ## @param controller.updateStrategy.type controller statefulset strategy type\n  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies\n  ##\n  updateStrategy:\n    ## StrategyType\n    ## Can be set to RollingUpdate or OnDelete\n    ##\n    type: RollingUpdate\n  ## @param controller.topologySpreadConstraints Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  ## topologySpreadConstraints:\n  ##   - maxSkew: 1\n  ##     topologyKey: failure-domain.beta.kubernetes.io/zone\n  ##     whenUnsatisfiable: DoNotSchedule\n  ##\n  topologySpreadConstraints: []\n  ## @param controller.schedulerName Alternate scheduler for the server controller\n  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/\n  ##\n  schedulerName: \"\"\n  ## @param controller.priorityClassName controller pods' priorityClassName\n  ##\n  priorityClassName: \"\"\n  ## @param controller.lifecycleHooks for the controller container(s) to automate configuration before or after startup\n  ##\n  lifecycleHooks: {}\n  ## @param controller.extraEnvVars Array with extra environment variables to add to controller nodes\n  ## e.g:\n  ## extraEnvVars:\n  ##   - name: FOO\n  ##     value: \"bar\"\n  ##\n  extraEnvVars: []\n  ## @param controller.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for controller nodes\n  ##\n  extraEnvVarsCM: \"\"\n  ## @param controller.extraEnvVarsSecret Name of existing Secret containing extra env vars for controller nodes\n  ##\n  extraEnvVarsSecret: \"\"\n  ## @param controller.extraVolumes Optionally specify extra list of additional volumes for the controller pod(s)\n  ##\n  extraVolumes: []\n  ## @param controller.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the controller container(s)\n  ##\n  extraVolumeMounts: []\n  ## @param controller.sidecars Add additional sidecar containers to the controller pod(s)\n  ## e.g:\n  ## sidecars:\n  ##   - name: your-image-name\n  ##     image: your-image\n  ##     imagePullPolicy: Always\n  ##     ports:\n  ##       - name: portname\n  ##         containerPort: 1234\n  ##\n  sidecars: []\n  ## @param controller.initContainers Add additional init containers to the controller pod(s)\n  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\n  ## e.g:\n  ## initContainers:\n  ##  - name: your-image-name\n  ##    image: your-image\n  ##    imagePullPolicy: Always\n  ##    command: ['sh', '-c', 'echo \"hello world\"']\n  ##\n  initContainers: []\n  ## Controller service parameters\n  ##\n  service:\n    ## @param controller.service.type controller service type\n    ##\n    type: ClusterIP\n    ## @param controller.service.ports.metrics Metrics port for the controller\n    ## @param controller.service.ports.telemetry Telemetry port for the controller\n    ##\n    ports:\n      metrics: 8080\n      telemetry: 8081\n    ## Node ports to expose\n    ## @param controller.service.nodePorts.metrics Node port for HTTP\n    ## @param controller.service.nodePorts.telemetry Node port for HTTPS\n    ## NOTE: choose port between \u003c30000-32767\u003e\n    ##\n    nodePorts:\n      metrics: \"\"\n      telemetry: \"\"\n    ## @param controller.service.clusterIP controller service Cluster IP\n    ## e.g.:\n    ## clusterIP: None\n    ##\n    clusterIP: \"\"\n    ## @param controller.service.loadBalancerIP controller service Load Balancer IP\n    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer\n    ##\n    loadBalancerIP: \"\"\n    ## @param controller.service.loadBalancerSourceRanges controller service Load Balancer sources\n    ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service\n    ## e.g:\n    ## loadBalancerSourceRanges:\n    ##   - 10.10.10.0/24\n    ##\n    loadBalancerSourceRanges: []\n    ## @param controller.service.externalTrafficPolicy controller service external traffic policy\n    ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    ##\n    externalTrafficPolicy: Cluster\n    ## @param controller.service.annotations Additional custom annotations for controller service\n    ##\n    annotations: {}\n    ## @param controller.service.extraPorts Extra port to expose on the controller service\n    ##\n    extraPorts: []\n  ## Network Policies\n  ## Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/\n  ##\n  networkPolicy:\n    ## @param controller.networkPolicy.enabled Specifies whether a NetworkPolicy should be created\n    ##\n    enabled: true\n    ## @param controller.networkPolicy.allowExternal Don't require server label for connections\n    ## The Policy model to apply. When set to false, only pods with the correct\n    ## server label will have network access to the ports server is listening\n    ## on. When true, server will accept connections from any source\n    ## (with the correct destination port).\n    ##\n    allowExternal: true\n    ## @param controller.networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.\n    ##\n    allowExternalEgress: true\n    ## @param controller.networkPolicy.kubeAPIServerPorts [array] List of possible endpoints to kube-apiserver (limit to your cluster settings to increase security)\n    ##\n    kubeAPIServerPorts: [443, 6443, 8443]\n    ## @param controller.networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolice\n    ## e.g:\n    ## extraIngress:\n    ##   - ports:\n    ##       - port: 1234\n    ##     from:\n    ##       - podSelector:\n    ##           - matchLabels:\n    ##               - role: frontend\n    ##       - podSelector:\n    ##           - matchExpressions:\n    ##               - key: role\n    ##                 operator: In\n    ##                 values:\n    ##                   - frontend\n    extraIngress: []\n    ## @param controller.networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy (ignored if allowExternalEgress=true)\n    ## e.g:\n    ## extraEgress:\n    ##   - ports:\n    ##       - port: 1234\n    ##     to:\n    ##       - podSelector:\n    ##           - matchLabels:\n    ##               - role: frontend\n    ##       - podSelector:\n    ##           - matchExpressions:\n    ##               - key: role\n    ##                 operator: In\n    ##                 values:\n    ##                   - frontend\n    ##\n    extraEgress: []\n    ## @param controller.networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces\n    ## @param controller.networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces\n    ##\n    ingressNSMatchLabels: {}\n    ingressNSPodMatchLabels: {}\n## @section Executor configuration section\n##\nexecutor:\n  ## Bitnami Argo Workflow Executor image\n  ## ref: https://hub.docker.com/r/bitnami/argo-workflow-exec/tags/\n  ## @param executor.image.registry [default: REGISTRY_NAME] executor image registry\n  ## @param executor.image.repository [default: REPOSITORY_NAME/argo-workflow-exec] executor image repository\n  ## @skip executor.image.tag executor image tag (immutable tags are recommended)\n  ## @param executor.image.digest executor image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag\n  ## @param executor.image.pullPolicy executor image pull policy\n  ## @param executor.image.pullSecrets executor image pull secrets\n  ##\n  image:\n    registry: docker.io\n    repository: bitnami/argo-workflow-exec\n    tag: 3.5.5-debian-12-r4\n    digest: \"\"\n    ## Specify a imagePullPolicy\n    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'\n    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images\n    ##\n    pullPolicy: IfNotPresent\n    ## Optionally specify an array of imagePullSecrets.\n    ## Secrets must be manually created in the namespace.\n    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\n    ## e.g:\n    ## pullSecrets:\n    ##   - myRegistryKeySecretName\n    ##\n    pullSecrets: []\n  ## Init container's resource requests and limits\n  ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n  ## @param executor.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if executor.resources is set (executor.resources is recommended for production).\n  ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15\n  ##\n  resourcesPreset: \"nano\"\n  ## @param executor.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)\n  ## Example:\n  ## resources:\n  ##   requests:\n  ##     cpu: 2\n  ##     memory: 512Mi\n  ##   limits:\n  ##     cpu: 3\n  ##     memory: 1024Mi\n  ##\n  resources: {}\n  ## @param executor.extraEnvVars Array with extra environment variables to add to server nodes\n  ## e.g:\n  ## extraEnvVars:\n  ##   - name: FOO\n  ##     value: \"bar\"\n  ##\n  extraEnvVars: []\n  ## Configure Container Security Context\n  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod\n  ## @param executor.containerSecurityContext.enabled Enabled executor containers' Security Context\n  ## @param executor.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container\n  ## @param executor.containerSecurityContext.runAsUser Set executor containers' Security Context runAsUser\n  ## @param executor.containerSecurityContext.runAsGroup Set executor containers' Security Context runAsGroup\n  ## @param executor.containerSecurityContext.runAsNonRoot Set executor containers' Security Context runAsNonRoot\n  ## @param executor.containerSecurityContext.readOnlyRootFilesystem Set read only root file system pod's Security Conte\n  ## @param executor.containerSecurityContext.privileged Set executor container's Security Context privileged\n  ## @param executor.containerSecurityContext.allowPrivilegeEscalation Set executor container's Security Context allowPrivilegeEscalation\n  ## @param executor.containerSecurityContext.capabilities.drop List of capabilities to be dropped\n  ## @param executor.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile\n  ##\n  containerSecurityContext:\n    enabled: true\n    seLinuxOptions: {}\n    runAsUser: 1001\n    runAsGroup: 1001\n    runAsNonRoot: true\n    privileged: false\n    allowPrivilegeEscalation: false\n    capabilities:\n      drop: [\"ALL\"]\n    seccompProfile:\n      type: \"RuntimeDefault\"\n    readOnlyRootFilesystem: true\n## @section Traffic Exposure Parameters\n##\n\n## Server ingress parameters\n## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/\n##\ningress:\n  ## @param ingress.enabled Enable ingress record generation for server\n  ##\n  enabled: false\n  ## @param ingress.pathType Ingress path type\n  ##\n  pathType: ImplementationSpecific\n  ## @param ingress.apiVersion Force Ingress API version (automatically detected if not set)\n  ##\n  apiVersion: \"\"\n  ## @param ingress.hostname Default host for the ingress record\n  ##\n  hostname: server.local\n  ## @param ingress.path Default path for the ingress record\n  ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers\n  ##\n  path: /\n  ## @param ingress.ingressClassName IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)\n  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster.\n  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/\n  ##\n  ingressClassName: \"\"\n  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.\n  ## For a full list of possible ingress annotations, please see\n  ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md\n  ## Use this parameter to set the required annotations for cert-manager, see\n  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations\n  ##\n  ## e.g:\n  ## annotations:\n  ##   kubernetes.io/ingress.class: nginx\n  ##   cert-manager.io/cluster-issuer: cluster-issuer-name\n  ##\n  annotations: {}\n  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter\n  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf \"%s-tls\" .Values.ingress.hostname }}`\n  ## You can:\n  ##   - Use the `ingress.secrets` parameter to create this TLS secret\n  ##   - Rely on cert-manager to create it by setting the corresponding annotations\n  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`\n  ##\n  tls: false\n  ## DEPRECATED: Use ingress.annotations instead of ingress.certManager\n  ## certManager: false\n  ##\n\n  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm\n  ##\n  selfSigned: false\n  ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record\n  ## e.g:\n  ## extraHosts:\n  ##   - name: server.local\n  ##     path: /\n  ##\n  extraHosts: []\n  ## @param ingress.extraPaths An array with additional arbitrary paths that may need to be added to the ingress under the main host\n  ## e.g:\n  ## extraPaths:\n  ## - path: /*\n  ##   backend:\n  ##     serviceName: ssl-redirect\n  ##     servicePort: use-annotation\n  ##\n  extraPaths: []\n  ## @param ingress.extraTls TLS configuration for additional hostname(s) to be covered with this ingress record\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls\n  ## e.g:\n  ## extraTls:\n  ## - hosts:\n  ##     - server.local\n  ##   secretName: server.local-tls\n  ##\n  extraTls: []\n  ## @param ingress.secrets Custom TLS certificates as secrets\n  ## NOTE: 'key' and 'certificate' are expected in PEM format\n  ## NOTE: 'name' should line up with a 'secretName' set further up\n  ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates\n  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days\n  ## It is also possible to create and manage the certificates outside of this helm chart\n  ## Please see README.md for more information\n  ## e.g:\n  ## secrets:\n  ##   - name: server.local-tls\n  ##     key: |-\n  ##       -----BEGIN RSA PRIVATE KEY-----\n  ##       ...\n  ##       -----END RSA PRIVATE KEY-----\n  ##     certificate: |-\n  ##       -----BEGIN CERTIFICATE-----\n  ##       ...\n  ##       -----END CERTIFICATE-----\n  ##\n  secrets: []\n  ## @param ingress.extraRules Additional rules to be covered with this ingress record\n  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-rules\n  ## e.g:\n  ## extraRules:\n  ## - host: server.local\n  ##     http:\n  ##       path: /\n  ##       backend:\n  ##         service:\n  ##           name: server-svc\n  ##           port:\n  ##             name: http\n  ##\n  extraRules: []\n## @section Workflows configuration\n##\nworkflows:\n  ## Service account configuration for workflows\n  ## @param workflows.serviceAccount.create Whether to create a service account to run workflows\n  ## @param workflows.serviceAccount.name Service account name to run workflows\n  ## @param workflows.serviceAccount.automountServiceAccountToken Automount service account token for the workflows service account\n  ## @param workflows.serviceAccount.annotations Annotations for service account. Evaluated as a template. Only used if `create` is `true`.\n  ##\n  serviceAccount:\n    create: true\n    name: \"\"\n    automountServiceAccountToken: false\n    annotations: {}\n  ## Create RBAC resources to run workflows.\n  ## A Role and Role Bindding are created per namespace in controller.workflowNamespaces\n  ## @param workflows.rbac.create Whether to create RBAC resource to run workflows\n  ##\n  rbac:\n    create: true\n## @section PostgreSQL subchart\n##\n\n## Postgresql subchart configuration\n## @param postgresql.enabled Enable PostgreSQL subchart and controller persistence using PostgreSQL\n## @param postgresql.service.ports.postgresql PostgreSQL port\n## @param postgresql.auth.username PostgreSQL username\n## @param postgresql.auth.database PortgreSQL database name\n## @param postgresql.auth.password PortgreSQL database password\n##\npostgresql:\n  enabled: false\n  service:\n    ports:\n      postgresql: 5432\n  auth:\n    username: postgres\n    database: bn_argo_workflows\n    password: \"\"\n  primary:\n    ## PostgreSQL Primary resource requests and limits\n    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n    ## @param postgresql.primary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).\n    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15\n    ##\n    resourcesPreset: \"nano\"\n    ## @param postgresql.primary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)\n    ## Example:\n    ## resources:\n    ##   requests:\n    ##     cpu: 2\n    ##     memory: 512Mi\n    ##   limits:\n    ##     cpu: 3\n    ##     memory: 1024Mi\n    ##\n    resources: {}\n\n## @section MySQL subchart\n##\n\n## Mysql subchart configuration\n## @param mysql.enabled Enable MySQL subchart and controller persistence using MySQL\n## @param mysql.service.ports.mysql MySQL port\n## @param mysql.auth.username MySQL username\n## @param mysql.auth.database MySQL database name\n## @param mysql.auth.password MySQL database password\n##\nmysql:\n  enabled: false\n  service:\n    ports:\n      mysql: 3306\n  auth:\n    username: mysql\n    database: bn_argo_workflows\n    password: \"\"\n  primary:\n    ## MySQL primary container's resource requests and limits\n    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\n    ## We usually recommend not to specify default resources and to leave this as a conscious\n    ## choice for the user. This also increases chances charts run on environments with little\n    ## resources, such as Minikube. If you do want to specify resources, uncomment the following\n    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n    ## @param mysql.primary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).\n    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15\n    ##\n    resourcesPreset: \"small\"\n    ## @param mysql.primary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)\n    ## Example:\n    ## resources:\n    ##   requests:\n    ##     cpu: 2\n    ##     memory: 512Mi\n    ##   limits:\n    ##     cpu: 3\n    ##     memory: 1024Mi\n    ##\n    resources: {}\n\n## @section External Database configuration\n##\n\n## External Database Configuration\n## @param externalDatabase.enabled Enable using externaldatabase and the controller to use persistence with it\n## @param externalDatabase.host External Database server host\n## @param externalDatabase.port External Database server port\n## @param externalDatabase.username External Database username\n## @param externalDatabase.password External Database user password\n## @param externalDatabase.database External Database database name\n## @param externalDatabase.existingSecret The name of an existing secret with database credentials\n## @param externalDatabase.type Either postgresql or mysql\n##\nexternalDatabase:\n  enabled: false\n  ## Either \"postgresql\" or  \"mysql\"\n  ##\n  type: \"\"\n  host: localhost\n  port: 3306\n  username: bn_workflows\n  password: \"\"\n  database: bitnami_workflows\n  ## NOTE: Must contain key `database-password`\n  ## NOTE: When it's set, the `externalDatabase.password` parameter is ignored\n  ##\n  existingSecret: \"\""
            ],
            "verify": false,
            "version": "8.0.5",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubectl_manifest",
      "name": "HTTPRoute",
      "provider": "provider[\"registry.opentofu.org/gavinbunney/kubectl\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "api_version": "gateway.networking.k8s.io/v1",
            "apply_only": false,
            "force_conflicts": false,
            "force_new": false,
            "id": "/apis/gateway.networking.k8s.io/v1/namespaces/default/httproutes/argo-workflows-server",
            "ignore_fields": null,
            "kind": "HTTPRoute",
            "live_manifest_incluster": "9e92b075495fdbafe348f33918f229e5d4e651795e7e2d38ab14abc2550165a7",
            "live_uid": "6dae1b83-6a5b-42bc-aa0c-e6ccd5b2e870",
            "name": "argo-workflows-server",
            "namespace": null,
            "override_namespace": null,
            "sensitive_fields": null,
            "server_side_apply": false,
            "timeouts": null,
            "uid": "6dae1b83-6a5b-42bc-aa0c-e6ccd5b2e870",
            "validate_schema": true,
            "wait": null,
            "wait_for_rollout": true,
            "yaml_body": "\napiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: argo-workflows-server\nspec:\n  parentRefs:\n    - name: eg\n  hostnames:\n    - \"argo-workflows.s.net-chain.xyz\"\n  rules:\n    - backendRefs:\n        - group: \"\"\n          kind: Service\n          namespace: argo\n          name: argo-workflows-server\n          port: 80\n          weight: 1\n      matches:\n        - path:\n            type: PathPrefix\n            value: /\n",
            "yaml_body_parsed": "apiVersion: gateway.networking.k8s.io/v1\nkind: HTTPRoute\nmetadata:\n  name: argo-workflows-server\nspec:\n  hostnames:\n  - argo-workflows.s.net-chain.xyz\n  parentRefs:\n  - name: eg\n  rules:\n  - backendRefs:\n    - group: \"\"\n      kind: Service\n      name: argo-workflows-server\n      namespace: argo\n      port: 80\n      weight: 1\n    matches:\n    - path:\n        type: PathPrefix\n        value: /\n",
            "yaml_incluster": "9e92b075495fdbafe348f33918f229e5d4e651795e7e2d38ab14abc2550165a7"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "argo-ns",
      "provider": "provider[\"registry.opentofu.org/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "argo",
            "metadata": [
              {
                "annotations": {
                  "name": "argo"
                },
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "argo",
                "resource_version": "75761",
                "uid": "eaecfd87-1f01-4f0b-876a-5c02cc31c222"
              }
            ],
            "timeouts": null,
            "wait_for_default_service_account": false
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    }
  ],
  "check_results": null
}
